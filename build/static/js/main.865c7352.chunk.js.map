{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","text","src","alt","App","useState","reciper","setRecipes","search","setSearch","query","setQuery","getRecipes","a","fetch","response","json","data","hits","console","log","useEffect","onSubmit","e","preventDefault","type","value","onChange","target","item","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uPAwBeA,EArBA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,SAASC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,YAClC,OACI,sBAAKC,UAAWC,IAAMC,OAAtB,UAEA,6BAAKN,IACL,6BACKG,EAAYI,KAAK,SAAAJ,GAAW,OAG7B,mCAAMA,EAAYK,KAAlB,YAGJ,4BAAIP,IACJ,qBAAKG,UAAWC,IAAMH,MAAOO,IAAKP,EAAOQ,IAAI,SCqDtCC,G,MA/DH,WAEV,IAFgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,WANnB,mBAMTK,EANS,KAMFC,EANE,KAWTC,EAAU,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OACSJ,EADT,mBAVf,WAUe,oBATd,qCAQI,cACZK,EADY,gBAICA,EAASC,OAJV,OAIZC,EAJY,OAKlBV,EAAWU,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANC,2CAAH,qDAUjBG,qBAAW,WACTT,MAGC,CAACF,IAcJ,OACE,sBAAKb,UAAU,MAAf,UACE,uBAAMyB,SATQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAMmBZ,UAAU,cAArC,UACA,uBAAOA,UAAU,aAAa4B,KAAK,OAAOC,MAAOlB,EAAQmB,SAfxC,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAejB,wBAAQ7B,UAAU,gBAAgB4B,KAAK,SAAvC,uBAEA,qBAAK5B,UAAU,UAAf,SACCS,EAAQN,KAAI,SAAA6B,GAAI,OACf,cAAC,EAAD,CAEApC,MAAOoC,EAAK9B,OAAO+B,MACnBpC,SAAUmC,EAAK9B,OAAOL,SACtBC,MAAOkC,EAAK9B,OAAOJ,MACnBC,YAAaiC,EAAK9B,OAAOH,aAJpBiC,EAAK9B,OAAO+B,iBC1CVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.865c7352.chunk.js","sourcesContent":["import React from \"react\";\nimport style from './recipe.module.css';\n\nconst Recipe = ({title,calories,image,ingredients}) => {\n    return(\n        <div className={style.recipe}>\n\n        <h1>{title}</h1>\n        <ol>\n            {ingredients.map (ingredients =>(\n\n\n            <li> {ingredients.text} </li>\n            ))}\n        </ol>\n        <p>{calories}</p>\n        <img className={style.image} src={image} alt=\"\" />\n\n\n\n        </div>\n    );\n};\n\nexport default Recipe;\n","import React, { useEffect, useState} from \"react\";\nimport Recipe from './Recipe';\nimport './App.css';\n\n\n\nconst App = () => {\n\n  const APP_ID = \"318063c4\";\n  const APP_KEY = \"b72af0655ad3a4ede8bfd38bd461994f\";\n  const [reciper, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\")\n \n\n\n\n   const getRecipes = async() => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n\n  }\n\n  useEffect( () => {\n    getRecipes();\n    \n \n  }, [query]);\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  };\n\n\n  return(\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\"> \n      <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} />\n      <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"recipes\">\n      {reciper.map(item => (\n        <Recipe \n        key={item.recipe.label}\n        title={item.recipe.label} \n        calories={item.recipe.calories} \n        image={item.recipe.image}\n        ingredients={item.recipe.ingredients}\n        \n        />\n      ))}\n      \n    </div>\n    </div>\n\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}